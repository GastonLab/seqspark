seqa {
  project = seqa
  seqaHome = ${HOME}/seqa
  localDir = ${PWD}
  hdfsDir = ${seqa.project}
  pipeline = [genotypeLevelQC, sampleLevelQC, variantLevelQC, association]

  import {
    format = vcf
    phased = false
    path = ${seqa.project}.vcf.bz2
    sampleInfo = ${seqa.project}.ped
    genomeBuild = hg19
    filters = [PASS]
    maxAlleleNum = 2 #only 2 right now
    mutType = [snv, indel] #current no long range cnv
    gtOnly = false
    samples = all
    variants = all
    save = false
  }

  export {
    format = cache
    phased = false
    path = ${seqa.project}.new.vcf
    sampleInfo = ${seqa.project}.new.ped
    genomeBuild = hg19
    filters = [PASS]
    maxAlleleNum = 2
    mutType = [snv, indel]
    gtOnly = true
    samples = all
    variants = all
    save = false
  }

  genotypeLevelQC {
    format = "GT:DP:AD:GQ"
    gd = [8, 249]
    gq = 20
    save = false
  }

  sampleLevelQC {
    pcaMaf = 0.01
    missing = 0.2
    save = false
  }

  variantLevelQC {
    missing = 0.1
    batchMissing = 0.1
    batchSpec = 2
    autosome = true
    hwe = 0.001
    #rareMaf = 0.01
    save = false
  }

  annotation {

    db = ${seqa.seqaHome}

    gene {
      build = hg19
      coord = ${db}/${seqa.annotation.gene.build}_refFlat_table
      seq = ${db}/${seqa.annotation.gene.build}_refGene_mRNA
    }

    dbNSFP = ${db}/dbNSFP.bz2

    maf {
      path = ${db}/ExAC.r0.3.sites.vep.vcf.bz2
      tag = "ExAC"
      an = "AN"
      ac = "AC"
    }
    save = false
  }

  association {
    trait {
      list = [control]
      control {
        binary = true
        covariates = ["age", "sex"]
        pc = 2
      }
    }
    #methods = ["single", "cmc", "brv", "VT", "rv-TDT", "SKAT"]
    method {
      list = ["single", "cmc", "brv", "vt"]
      resampling = false
      test = score #could be score, lhr, wald
      misc = {}
      filters = [
        "splicing"
        "frameshift insertion"
        "frameshift deletion"
        "frameshift block substitution"
        "stopgain"
        "stoploss"
        "nonsynonymous SNV"
        # it's optional for the nonframeshift variantions
        #        "nonframeshift insertion"
        #        "nonframeshift deletion"
        #        "nonframeshift block substitution"
      ]
      skat {
        type = skat
        weight = skat
        maf {
          source = pooled
          cutoff = 0.01
          fixed = true
        }
        misc {
          method = "optimal.adj"
          rCorr = []
          kernel = "linear.weighted"
          weightBeta = [1, 25]
          smallSampleAdjustment = true
        }
      }
      meta {
        type = meta
        maf {
          source = pooled
          cutoff = 0.01
        }
      }
      snv {
        type = snv
        maf {
          source = pooled
          cutoff = 0.01
          fixed = true
        }
      }
      cmc {
        type = cmc
        maf {
          source = pooled #could be 'controls', 'annotation' if it is annotation. seqa will read SEQA_ANNO_AF
          cutoff = 0.01
          fixed = true
        }
      }
      brv {
        type = burden
        weight = equal #could be wss (),
        maf {
          source = pooled #could be 'controls', 'annotation' if it is annotation. seqa will read SEQA_ANNO_AF
          cutoff = 0.01
          fixed = true
        }
      }
      wss {
        type = burden
        weight = wss
        maf {
          source = pooled
          cutoff = 0.01
          fixed = true
        }
      }
      vt {
        type = burden
        weight = 1
        maf {
          source = pooled #could be 'controls', 'annotation' if it is annotation. seqa will read SEQA_ANNO_AF
          cutoff = 0.05
          fixed = false
        }
      }
    }
  }
}

meta {
  project = seqa
  seqaHome = ${HOME}/seqa
  localDir = ${PWD}
  hdfsDir = ${seqa.project}

  studies = [ study1, study2, study3 ]
}