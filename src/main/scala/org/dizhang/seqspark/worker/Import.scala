package org.dizhang.seqspark.worker

import org.apache.spark.SparkContext
import org.dizhang.seqspark.ds.{Variant, Phenotype, VCF, StringGenotype}
import org.dizhang.seqspark.util.InputOutput._
import org.dizhang.seqspark.util.Constant._
import org.dizhang.seqspark.util.UserConfig._
import org.dizhang.seqspark.worker.Worker.Data
import org.dizhang.seqspark.annot.IntervalTree.overlap

/**
 * import data from VCF file or cache
 */
object Import extends Worker[Unit, Data] {

  implicit val name = new WorkerName("import")

  def apply(none: Unit)(implicit config: RootConfig, sc: SparkContext): Data = {
    val importConfig = config.`import`
    val path = importConfig.path
    val rawPheno = Phenotype(importConfig.sampleInfo)

    val (pheno, samples) = importConfig.samples match {
      case Left(s) => (rawPheno, Left(s))
      case Right(f) => (rawPheno.filter(f), Right(rawPheno.indicate(f)))
    }

    importConfig.format match {
      case ImExType.vcf => (makeGenotype(importConfig, sc, samples), pheno)
      case ImExType.cache => (VCF.load(importConfig, sc), pheno)
    }
  }

  /**
    * make genotype based on external VCF file
    * e.g. generated by GATK
    */

  def makeGenotype(imCnf: ImExConfig,
                   sc: SparkContext,
                   samples: Either[Samples.Value, Array[Boolean]]): VCF = {
    val raw = sc.textFile(imCnf.path)
    val default = if (imCnf.phased) UnPhased.Gt.ref else UnPhased.Gt.ref.bt.toPhased
    val vars = raw filter (l => ! l.startsWith("#") ) map (l => Variant.fromString(l, default))
    val s1 = vars filter (v =>
      imCnf.filters.contains(v.filter) && v.alleleNum == 2 && imCnf.mutType.contains(v.mutType))

    val s2 = imCnf.variants match {
      case Left(Variants.all) => s1
      case Right(tree) => s1 filter (v => overlap(tree, v.toRegion))
    }

    val s3 = samples match {
      case Left(Samples.all) => s2
      case Left(Samples.none) => s2.map(v => Variant.fill[String](v.meta, 0)(default))
      case Right(b) => s2.map(v => v.select(b))
    }

    /** save is very time-consuming and resource-demanding */
    if (imCnf.save)
      try {
        s3.saveAsObjectFile(saveDir)
      } catch {
        case e: Exception => {println("Import: save failed"); System.exit(1)}
      }
    StringGenotype(s3, imCnf)
  }
}
